Fishbowl::Connection.connect
Fishbowl::Connection.login
builder = Nokogiri::XML::Builder.new do |xml|
  xml.request {
    xml. ExecuteQueryRq {
      xml.Query "select DISTINCT(customer.id),customer.name FROM so inner join customer on so.customerId=customer.id  WHERE customer.name LIKE '%10%'"
    }
  }
end
code, response = Fishbowl::Objects::BaseObject.new.send_request(builder, "ProductGetRs")
Fishbowl::Connection.close
customers=[]
response.xpath("//Row")[1..-1].each do |row|
    row_array=row.content.split(',').map{|x| x.gsub("\"","")}
    customers<< Customer.create(fb_id: row_array[0], name: row_array[1], order_consolidation: order_consolidation)
end
#
return customers

***
SELECT Product.num,
  QtyInventoryTotals.qtyOnHand as qty_on_hand,
  QtyNotAvailableToPick.qty as qty_not_available,
  QtyCommitted.qty AS qty_committed
  FROM 
  Part LEFT OUTER JOIN Product ON Part.id = Product.partId 
  LEFT OUTER JOIN QtyInventoryTotals on QtyInventoryTotals.partId=Part.id
  LEFT OUTER JOIN QtyCommitted ON QtyInventoryTotals.partId=QtyCommitted.partId
  LEFT OUTER JOIN QtyNotAvailableToPick ON QtyNotAvailableToPick.partId=QtyInventoryTotals.partId
  WHERE QtyCommitted.locationGroupId=1 
  AND QtyInventoryTotals.locationGroupId=1
  AND QtyNotAvailableToPick.locationGroupId=1 AND QtyNotAvailableToPick.partId=8213

SELECT Product.num,
  QtyInventoryTotals.qtyOnHand as qty_on_hand,
  QtyInventoryTotals.locationGroupId as qty_inventory_totals_location,
  QtyCommitted.locationGroupId as qty_committed_location,
  QtyNotAvailableToPick.locationGroupId as qty_not_available_to_pick_location,
  QtyNotAvailableToPick.qty as qty_not_available,
  QtyCommitted.qty AS qty_committed
FROM 
  Part LEFT JOIN Product ON Part.id = Product.partId 
  LEFT JOIN QtyInventoryTotals 
    ON Part.id=QtyInventoryTotals.partId
    AND (QtyInventoryTotals.locationGroupId=1)
  LEFT JOIN QtyCommitted 
    ON Part.id=QtyInventoryTotals.partId
    AND QtyCommitted.locationGroupId=1
    AND QtyInventoryTotals.locationGroupId=1
  LEFT JOIN QtyNotAvailableToPick 
    ON Part.id=QtyNotAvailableToPick.partId
    AND QtyNotAvailableToPick.locationGroupId=1
    AND QtyCommitted.locationGroupId=1
    AND QtyInventoryTotals.locationGroupId=1
WHERE Product.partId=2570
    AND ((QtyNotAvailableToPick.locationGroupId=1) OR (QtyNotAvailableToPick.locationGroupId IS NULL)  )
    AND ((QtyCommitted.locationGroupId=1) OR (QtyCommitted.locationGroupId IS NULL) )
    AND ((QtyInventoryTotals.locationGroupId=1) OR (QtyInventoryTotals.locationGroupId IS NULL ));

*** Get SOs with Query
        Fishbowl::Connection.connect
        Fishbowl::Connection.login
        builder = Nokogiri::XML::Builder.new do |xml|
          xml.request {
            xml. ExecuteQueryRq {
              xml.Query "SELECT So.customerId, So.num, SoItem.productNum, SoItem.qtyToFulfill FROM So INNER JOIN SoItem ON So.id = SoItem.soId WHERE So.statusId IN (10,20,30)"
            }
          }
        end
        code, response = Fishbowl::Objects::BaseObject.new.send_request(builder, "ProductGetRs")
        Fishbowl::Connection.close
        response.xpath("//Row").each do |row|
            row_array=row.content.split(',').map{|x| x.gsub("\"","")}
            customer_fb_id=row_array[0]
            sales_order_num = row_array[1]
            product_num = row_array[2]
            qty_to_fulfill = row_array[3]
            customer=Customer.find_by_fb_id_and_order_consolidation_id(customer_fb_id,self.id) || Customer.create(fb_id: customer_fb_id, name: customer_name, order_consolidation: self)
            sales_order=SalesOrder.find_by_sales_order_number_and_customer_id(sales_order_num,customer.id) || SalesOrder.create(num: sales_order_number, customer: customer )
            sales_order_item=SalesOrderItem.create(product_num: product_num,qty_to_fulfill: qty_to_fulfill)
        end
*** Get Inventory With Db Query
Fishbowl::Connection.connect
Fishbowl::Connection.login
builder = Nokogiri::XML::Builder.new do |xml|
  xml.request {
    xml. ExecuteQueryRq {
      xml.Query "SELECT Product.num,QtyInventoryTotals.* FROM QtyInventoryTotals INNER JOIN Part ON QtyInventoryTotals.partId = Part.id INNER JOIN Product ON Part.id = Product.partId WHERE QtyInventoryTotals.LOCATIONGROUPID=1 AND Product.num='LITA156LP-COLOR'"
    }
  }
end
code, response = Fishbowl::Objects::BaseObject.new.send_request(builder, "ProductGetRs")
Fishbowl::Connection.close
product_inventory={}
response.xpath("//Row")[1..-1].each do |row|
    row_array=row.content.split(',').map{|x| x.gsub("\"","")}
    qty_on_hand = row_array[3]
    qty_allocated = row_array[4]
    qty_not_available_to_pick = row_array[5]
    product_inventory["#{row_array[0]}"] = qty_on_hand.to_i - qty_allocated.to_i - qty_not_available.to_i
end

qty_pickable =   qty_on_hand - qty_allocatated - qty_not_available


response.xpath("//Row")[0]
response.xpath("//Row")[1]

***

customers=Customer.create_from_open_orders
customers.each do |customer|
    customer.create_sales_orders
end

customers=Customer.create_from_open_orders
customer.create_sales_orders
customer.needs_consolidation?
orders=customer.consolidated_orders

orders[:not_pickable].sales_order_items.each do |i|  
    puts "#{i.product_num}, #{i.qty_to_fulfill}"
end
orders[:pickable].sales_order_items.each do |i|  
    puts "#{i.product_num}, #{i.qty_to_fulfill}"
end

***
oc=OrderConsolidation.find_by_id 3
c=oc.customers.second
c.create_sales_orders

*** Items on same order that have same number one pickable one not are being merged

PICKABLE
C502, 25 OKAY
CR401, 25 (should be split)
CR403, 25 OKAY
CR402, 25 OKAY
C501, 25 NOT PICKALBE
iEdge, 8 OKAY

NOT PICKABLE
BB2011, 1 RIGHT
iEdge, 2 OKAY

***

sales_orders=SalesOrder.find_open_orders
builder=sales_orders[0].xml_builder
Fishbowl::Connection.connect
Fishbowl::Connection.login
code, response = Fishbowl::Objects::BaseObject.new.send_request(builder, "ProductGetRs")
Fishbowl::Connection.close


sales_orders=SalesOrder.find_open_orders
sales_orders.each do |sales_order|
    puts "SALES ORDER: #{sales_order.num}"
end


Fishbowl::Connection.connect
Fishbowl::Connection.login
builder = Nokogiri::XML::Builder.new do |xml|
  xml.request {
    xml. InvQtyRq {
      xml.PartNum 'BB2001'
    }
  }
end
code, response = Fishbowl::Objects::BaseObject.new.send_request(builder, "ProductGetRs")
Fishbowl::Connection.close

*** GetSoList
Fishbowl::Connection.connect
Fishbowl::Connection.login
builder = Nokogiri::XML::Builder.new do |xml|
  xml.request {
    xml. GetSOListRq {
      xml.Status 'All Open'
    }
  }
end
code, response = Fishbowl::Objects::BaseObject.new.send_request(builder, "ProductGetRs")
Fishbowl::Connection.close


Fishbowl::Connection.connect
Fishbowl::Connection.login
request=Nokogiri::XML::Builder.new do |xml|
      xml.request {
        xml.VoidSORq {
          xml.SONumber "G477868"
        }
      }
    end
    
code, response = Fishbowl::Objects::BaseObject.new.send_request(request, 'VoidSORs')
    
    
    

request=Nokogiri::XML::Builder.new do |xml|
        xml.request {
            xml.InvQtyRq {
              xml.PartNum 
              xml.LastModifiedFrom '2001-02-03T10:04:27'
              xml.LastModifiedTo '2029-02-03T10:04:27'
            }
        }
    end

Fishbowl::Objects::BaseObject.new.send_request(request, 'InvQtyRq')


Fishbowl::Connection.connect
Fishbowl::Connection.login

request=Nokogiri::XML::Builder.new do |xml|
        xml.request {
            xml.AddSOItemRq {
                xml.OrderNum 50055
                xml.SalesOrderItem {
                    xml.ID -1
                    xml.ProductNumber 'BTY100-Core'
                    xml.SOID 94
                    xml.Description 'Battery Pack'
                    xml.Taxable true
                    xml.Quantity 1
                    xml.ProductPrice -95.00
                    xml.TotalPrice -95.00
                    xml.UOMCode 'ea'
                    xml.ItemType 20
                    xml.Status 10
                    xml.QuickBooksClassName 'Salt Lake City'
                    xml.DateScheduledFulfillment '2018-05-18 14 02 21'
                    xml.NewItemFlag false
                }
            }
        }
    end

oc=OrderConsolidation.last
Fishbowl::Connection.connect
Fishbowl::Connection.login
request=oc.customers[2].sales_orders[0].xml_builder
Fishbowl::Objects::BaseObject.new.send_request(request, 'ImportRq')
